<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDbUnit.Core</name>
    </assembly>
    <members>
        <member name="M:NDbUnit.Core.SqlLite.SqlLiteDbOperation.OnInsertIdentity(System.Data.DataTable,System.Data.IDbCommand,System.Data.IDbTransaction)">
            <summary>
            SQLite doesn't need any changes to insert PK values.
            </summary>
            <param name="dataTable"></param>
            <param name="dbCommand"></param>
            <param name="dbTransaction"></param>
        </member>
        <member name="T:NDbUnit.Core.DbOperationFlag">
            <summary>
            The database operation to perform.
            </summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.None">
            <summary>No operation.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Insert">
            <summary>Insert rows into a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.InsertIdentity">
            <summary>Insert rows into a set of database tables.  Allow identity 
            inserts to occur.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Delete">
            <summary>Delete rows from a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.DeleteAll">
            <summary>Delete all rows from a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Update">
            <summary>Update rows in a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Refresh">
            <summary>Refresh rows in a set of database tables.  Rows that exist 
            in the database are updated.  Rows that don't exist are inserted.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.CleanInsert">
            <summary>Composite operation of DeleteAll and Insert.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.CleanInsertIdentity">
            <summary>Composite operation of DeleteAll and InsertIdentity.</summary>
        </member>
        <member name="T:NDbUnit.Core.OleDb.OleDbType">
            <summary>
            An enumeration specifying the OLE database type.
            </summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.OleDbType.NoDb">
            <summary>No database.</summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.OleDbType.SqlServer">
            <summary>Sql server.</summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.OleDbType.Oracle">
            <summary>Oracle.</summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.OleDbType.DB2">
            <summary>DB2.</summary>
        </member>
        <member name="M:NDbUnit.Core.SqlLite.SqlLiteDbCommandBuilder.IsAutoIncrementing(System.Data.DataRow)">
            <summary>
            Since SQLite keys are auto incremented by default we need to check to see if the column
            is a key as well, since not all columns will be marked with AUTOINCREMENT
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:NDbUnit.Core.DataSetTableIterator">
            <summary>
            Class that builds an iterator for tables.  The order of the tables returned by the iterator
            is determined by the foreign keys between tables.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.#ctor(System.Data.DataSet)">
            <summary>
            Constructor that takes in a dataset to build iterator for the tables.
            </summary>
            <param name="dataSet">DataSet containing tables.</param>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.BuildTableList(System.Data.DataSet)">
            <summary>
            Builds the table list.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.ReverseListIfNeeded">
            <summary>
            Reverses the list if needed.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.#ctor(System.Data.DataSet,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.DataSetTableIterator"/> class.
            </summary>
            <param name="dataSet">The data set.</param>
            <param name="iterateInReverse">if set to <c>true</c> [iterate in reverse].</param>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.AddTablesToList(System.Data.DataTableCollection)">
            <summary>
            Iterate over tables in dataset and at them to the internal list.
            </summary>
            <param name="tables">Collection of tables.</param>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.ShouldAddToList(System.Data.DataTable)">
            <summary>
            Adds a table to the list if
                - It hasn't already been added
                - It has no relations to parent tables where the parent table isn't in the list.
            </summary>
            <param name="table">DataTable to check if it meets conditions to add to list.</param>
            <returns>True if should add, otherwise false.</returns>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.System#Collections#Generic#IEnumerable{System#Data#DataTable}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NDbUnit.Core.DataSetTableIterator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:NDbUnit.Core.DataSetTableIterator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:NDbUnit.Core.SqlClient.SqlDbUnitTest">
            <summary>
            The Sql Server unit test data adapter.
            </summary>
            <example>
            <code>
            string connectionString = "Persist Security Info=False;Integrated Security=SSPI;database=testdb;server=V-AL-DIMEOLA\NETSDK";
            SqlDbUnitTest sqlDbUnitTest = new SqlDbUnitTest(connectionString);
            string xmlSchemaFile = "User.xsd";
            string xmlFile = "User.xml";
            sqlDbUnitTest.ReadXmlSchema(xmlSchemaFile);
            sqlDbUnitTest.ReadXml(xmlFile);
            sqlDbUnitTest.PerformDbOperation(DbOperation.CleanInsertIdentity);
            </code>
            <seealso cref="T:NDbUnit.Core.INDbUnitTest"/>
            </example>
        </member>
        <member name="T:NDbUnit.Core.NDbUnitTest">
            <summary>
            The base class implementation of all NDbUnit unit test data adapters.
            </summary>
        </member>
        <member name="T:NDbUnit.Core.INDbUnitTest">
            <summary>
            Represents a unit test database initialization operation.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.PerformDbOperation(NDbUnit.Core.DbOperationFlag)">
            <summary>
            Performs a database operation.
            </summary>
            <param name="dbOperationFlag">The database operation to perform.</param>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.String)">
            <summary>
            Read in an xml schema file whose schema represents a set of
            tables in a database.  This schema file is used to build the
            database modification commands that are used to update the 
            database.  This is the first function that must be called 
            prior to any other functions being called on the interface.  
            Otherwise, an exception will be thrown.
            </summary>
            <remarks>The xml schema file can be generated by dragging and 
            dropping tables from Visual Studio's server explorer into a 
            DataSet.xsd file.</remarks>
            <param name="xmlSchemaFile">The schema file.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.IO.Stream)">
            <summary>
            Read in an xml schema whose schema represents a set of
            tables in a database.  This schema is used to build the
            database modification commands that are used to update the 
            database.  This is the first function that must be called 
            prior to any other functions being called on the interface.  
            Otherwise, an exception will be thrown.
            </summary>
            <param name="xmlSchema">The schema stream.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXml(System.String)">
            <summary>
            Read in an xml file whose data should be conform to the schema 
            of the file specified in the call to <see cref="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.String)"/>.  
            If the data does not conform to the schema, it will be ignored.  
            This data is used to update the database.
            </summary>
            <param name="xmlFile">The xml file.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXml(System.IO.Stream)">
            <summary>
            Read in an xml stream whose data should be conform to the schema 
            specified in the call to <see cref="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.String)"/>.  
            If the data does not conform to the schema, it will be ignored.  
            This data is used to update the database.
            </summary>
            <param name="xml">The xml stream.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.CopyDataSet">
            <summary>
            Gets a <see cref="T:System.Data.DataSet"/> object that contains both the 
            internal schema information and data.
            </summary>
            <returns><see cref="T:System.Data.DataSet"/></returns>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.CopySchema">
            <summary>
            Gets a <see cref="T:System.Data.DataSet"/> object that contains only the 
            internal schema information.
            </summary>
            <returns><see cref="T:System.Data.DataSet"/></returns>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.GetDataSetFromDb">
            <summary>
            Gets a data set from the database tables.  Includes all
            table names in the xml schema.
            </summary>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.GetDataSetFromDb(System.Collections.Specialized.StringCollection)">
            <summary>
            Gets a data set from the database tables.
            </summary>
            <param name="tableNames">The list of table names in the xml 
            schema to export. If null, then all table names in the xml 
            schema will be exported.</param>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="E:NDbUnit.Core.INDbUnitTest.PostOperation">
            <summary>
            Occurs after DbOperation has completed.
            </summary>
        </member>
        <member name="E:NDbUnit.Core.INDbUnitTest.PreOperation">
            <summary>
            Occurs before DbOperation begins.
            </summary>
        </member>
        <member name="T:NDbUnit.Core.NDbUnitException">
            <summary>
            The base class exception of all exceptions thrown by objects
            in NDbUnit.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class 
            with a specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class 
            with serialized data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class 
            with the specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:NDbUnit.Core.OleDb.OleDbUnitTest">
            <summary>
            The OleDb unit test data adapter.
            </summary>
            <example>
            <code>
            string connectionString = "Provider=SQLOLEDB;Data Source=V-AL-DIMEOLA\NETSDK;Initial Catalog=testdb;Integrated Security=SSPI;";
            OleDbUnitTest oleDbUnitTest = new OleDbUnitTest(connectionString);
            string xmlSchemaFile = "User.xsd";
            string xmlFile = "User.xml";
            oleDbUnitTest.ReadXmlSchema(xmlSchemaFile);
            oleDbUnitTest.ReadXml(xmlFile);
            oleDbUnitTest.PerformDbOperation(DbOperation.CleanInsertIdentity);
            </code>
            <seealso cref="T:NDbUnit.Core.INDbUnitTest"/>
            </example>
        </member>
        <member name="M:NDbUnit.Core.OleDb.OleDbUnitTest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.OleDb.OleDbUnitTest"/> class.
            </summary>
            <param name="connectionString">The connection string 
            used to open the database.
            <seealso cref="T:System.Data.IDbConnection"/></param>
        </member>
        <member name="P:NDbUnit.Core.OleDb.OleDbUnitTest.OleOleDbType">
            <summary>
            Gets or sets the OLE database type.  The default value for an 
            instance of an object is <see cref="F:NDbUnit.Core.OleDb.OleDbType.NoDb"/>.
            </summary>
        </member>
        <member name="T:NDbUnit.Core.MySqlClient.MySqlDbUnitTest">
            <summary>
            The MySql unit test data adapter.
            </summary>
            <example>
            <code>
            string connectionString = "Persist Security Info=False;Integrated Security=SSPI;database=testdb;server=V-AL-DIMEOLA\NETSDK";
            MySqlDbUnitTest sqlDbUnitTest = new SqlDbUnitTest(connectionString);
            string xmlSchemaFile = "User.xsd";
            string xmlFile = "User.xml";
            sqlDbUnitTest.ReadXmlSchema(xmlSchemaFile);
            sqlDbUnitTest.ReadXml(xmlFile);
            sqlDbUnitTest.PerformDbOperation(DbOperation.CleanInsertIdentity);
            </code>
            <seealso cref="T:NDbUnit.Core.INDbUnitTest"/>
            </example>
        </member>
    </members>
</doc>
