<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDbUnit.Core</name>
    </assembly>
    <members>
        <member name="T:NDbUnit.Core.OleDb.DbType">
            <summary>
            An enumeration specifying the OLE database type.
            </summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.DbType.NoDb">
            <summary>No database.</summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.DbType.SqlServer">
            <summary>Sql server.</summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.DbType.Oracle">
            <summary>Oracle.</summary>
        </member>
        <member name="F:NDbUnit.Core.OleDb.DbType.DB2">
            <summary>DB2.</summary>
        </member>
        <member name="T:NDbUnit.Core.OleDb.OleDbUnitTest">
            <summary>
            The OleDb unit test data adapter.
            </summary>
            <example>
            <code>
            string connectionString = "Provider=SQLOLEDB;Data Source=V-AL-DIMEOLA\NETSDK;Initial Catalog=testdb;Integrated Security=SSPI;";
            OleDbUnitTest oleDbUnitTest = new OleDbUnitTest(connectionString);
            string xmlSchemaFile = "User.xsd";
            string xmlFile = "User.xml";
            oleDbUnitTest.ReadXmlSchema(xmlSchemaFile);
            oleDbUnitTest.ReadXml(xmlFile);
            oleDbUnitTest.PerformDbOperation(DbOperation.CleanInsertIdentity);
            </code>
            <seealso cref="T:NDbUnit.Core.INDbUnitTest"/>
            </example>
        </member>
        <member name="T:NDbUnit.Core.NDbUnitTest">
            <summary>
            The base class implementation of all NDbUnit unit test data adapters.
            </summary>
        </member>
        <member name="T:NDbUnit.Core.INDbUnitTest">
            <summary>
            Represents a unit test database initialization operation.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.PerformDbOperation(NDbUnit.Core.DbOperationFlag)">
            <summary>
            Performs a database operation.
            </summary>
            <param name="dbOperationFlag">The database operation to perform.</param>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.String)">
            <summary>
            Read in an xml schema file whose schema represents a set of
            tables in a database.  This schema file is used to build the
            database modification commands that are used to update the 
            database.  This is the first function that must be called 
            prior to any other functions being called on the interface.  
            Otherwise, an exception will be thrown.
            </summary>
            <remarks>The xml schema file can be generated by dragging and 
            dropping tables from Visual Studio's server explorer into a 
            DataSet.xsd file.</remarks>
            <param name="xmlSchemaFile">The schema file.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.IO.Stream)">
            <summary>
            Read in an xml schema whose schema represents a set of
            tables in a database.  This schema is used to build the
            database modification commands that are used to update the 
            database.  This is the first function that must be called 
            prior to any other functions being called on the interface.  
            Otherwise, an exception will be thrown.
            </summary>
            <param name="xmlSchema">The schema stream.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXml(System.String)">
            <summary>
            Read in an xml file whose data should be conform to the schema 
            of the file specified in the call to <see cref="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.String)"/>.  
            If the data does not conform to the schema, it will be ignored.  
            This data is used to update the database.
            </summary>
            <param name="xmlFile">The xml file.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.ReadXml(System.IO.Stream)">
            <summary>
            Read in an xml stream whose data should be conform to the schema 
            specified in the call to <see cref="M:NDbUnit.Core.INDbUnitTest.ReadXmlSchema(System.String)"/>.  
            If the data does not conform to the schema, it will be ignored.  
            This data is used to update the database.
            </summary>
            <param name="xml">The xml stream.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.CopyDataSet">
            <summary>
            Gets a <see cref="T:System.Data.DataSet"/> object that contains both the 
            internal schema information and data.
            </summary>
            <returns><see cref="T:System.Data.DataSet"/></returns>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.CopySchema">
            <summary>
            Gets a <see cref="T:System.Data.DataSet"/> object that contains only the 
            internal schema information.
            </summary>
            <returns><see cref="T:System.Data.DataSet"/></returns>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.GetDataSetFromDb">
            <summary>
            Gets a data set from the database tables.  Includes all
            table names in the xml schema.
            </summary>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="M:NDbUnit.Core.INDbUnitTest.GetDataSetFromDb(System.Collections.Specialized.StringCollection)">
            <summary>
            Gets a data set from the database tables.
            </summary>
            <param name="tableNames">The list of table names in the xml 
            schema to export. If null, then all table names in the xml 
            schema will be exported.</param>
            <exception cref="T:NDbUnit.Core.NDbUnitException"/>
        </member>
        <member name="P:NDbUnit.Core.INDbUnitTest.QuotePrefix">
            <summary>
            Gets or sets the beginning character or characters to use 
            when working with database objects (for example, tables or 
            columns) whose names contain characters such as spaces or 
            reserved tokens.
            </summary>
        </member>
        <member name="P:NDbUnit.Core.INDbUnitTest.QuoteSuffix">
            <summary>
            Gets or sets the ending character or characters to use 
            when working with database objects (for example, tables or 
            columns) whose names contain characters such as spaces or 
            reserved tokens.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.OleDb.OleDbUnitTest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.OleDb.OleDbUnitTest"/> class.
            </summary>
            <param name="connectionString">The connection string 
            used to open the database.
            <seealso cref="T:System.Data.IDbConnection"/></param>
        </member>
        <member name="P:NDbUnit.Core.OleDb.OleDbUnitTest.OleDbType">
            <summary>
            Gets or sets the OLE database type.  The default value for an 
            instance of an object is <see cref="F:NDbUnit.Core.OleDb.DbType.NoDb"/>.
            </summary>
        </member>
        <member name="T:NDbUnit.Core.SqlClient.SqlDbOperation">
            <summary>
            Summary description for SqlDbOperation.
            </summary>
        </member>
        <member name="T:NDbUnit.Core.SqlClient.SqlDbUnitTest">
            <summary>
            The Sql Server unit test data adapter.
            </summary>
            <example>
            <code>
            string connectionString = "Persist Security Info=False;Integrated Security=SSPI;database=testdb;server=V-AL-DIMEOLA\NETSDK";
            SqlDbUnitTest sqlDbUnitTest = new SqlDbUnitTest(connectionString);
            string xmlSchemaFile = "User.xsd";
            string xmlFile = "User.xml";
            sqlDbUnitTest.ReadXmlSchema(xmlSchemaFile);
            sqlDbUnitTest.ReadXml(xmlFile);
            sqlDbUnitTest.PerformDbOperation(DbOperation.CleanInsertIdentity);
            </code>
            <seealso cref="T:NDbUnit.Core.INDbUnitTest"/>
            </example>
        </member>
        <member name="M:NDbUnit.Core.SqlClient.SqlDbUnitTest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.SqlClient.SqlDbUnitTest"/> class.
            </summary>
            <param name="connectionString">The connection string 
            used to open the database.
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/></param>
        </member>
        <member name="T:NDbUnit.Core.NDbUnitException">
            <summary>
            The base class exception of all exceptions thrown by objects
            in NDbUnit.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class.
            </summary>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class 
            with a specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class 
            with serialized data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NDbUnit.Core.NDbUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NDbUnit.Core.NDbUnitException"/> class 
            with the specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:NDbUnit.Core.DbOperationFlag">
            <summary>
            The database operation to perform.
            </summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.None">
            <summary>No operation.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Insert">
            <summary>Insert rows into a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.InsertIdentity">
            <summary>Insert rows into a set of database tables.  Allow identity 
            inserts to occur.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Delete">
            <summary>Delete rows from a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.DeleteAll">
            <summary>Delete all rows from a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Update">
            <summary>Update rows in a set of database tables.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.Refresh">
            <summary>Refresh rows in a set of database tables.  Rows that exist 
            in the database are updated.  Rows that don't exist are inserted.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.CleanInsert">
            <summary>Composite operation of DeleteAll and Insert.</summary>
        </member>
        <member name="F:NDbUnit.Core.DbOperationFlag.CleanInsertIdentity">
            <summary>Composite operation of DeleteAll and InsertIdentity.</summary>
        </member>
    </members>
</doc>
